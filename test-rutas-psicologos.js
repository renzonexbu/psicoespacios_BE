const axios = require('axios');

// Configuraci√≥n
const BASE_URL = 'http://localhost:3000';

// Token de autenticaci√≥n (reemplazar con un token v√°lido)
const AUTH_TOKEN = 'tu-token-jwt-aqui';

async function testRutasPsicologos() {
  try {
    console.log('üß™ Probando rutas de psic√≥logos para verificar conflictos...\n');

    // Test 1: Verificar que crear-paciente funciona
    console.log('1Ô∏è‚É£ Probando POST /api/v1/psicologos/crear-paciente:');
    try {
      const response = await axios.post(`${BASE_URL}/api/v1/psicologos/crear-paciente`, {
        nombre: 'Test',
        apellido: 'Usuario',
        rut: '11111111-1',
        email: 'test@ejemplo.com',
        fechaNacimiento: '1990-01-01'
      }, {
        headers: {
          'Authorization': `Bearer ${AUTH_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('   ‚úÖ POST crear-paciente funciona correctamente');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('   ‚ö†Ô∏è  Error de autenticaci√≥n (esperado sin token v√°lido)');
      } else {
        console.log(`   ‚ùå Error inesperado: ${error.response?.data?.message || error.message}`);
      }
    }

    // Test 2: Verificar que GET con ID espec√≠fico funciona
    console.log('\n2Ô∏è‚É£ Probando GET /api/v1/psicologos/:id:');
    try {
      const response = await axios.get(`${BASE_URL}/api/v1/psicologos/123e4567-e89b-12d3-a456-426614174000`, {
        headers: {
          'Authorization': `Bearer ${AUTH_TOKEN}`
        }
      });
      console.log('   ‚úÖ GET con ID espec√≠fico funciona correctamente');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('   ‚ö†Ô∏è  Error de autenticaci√≥n (esperado sin token v√°lido)');
      } else if (error.response?.status === 404) {
        console.log('   ‚ö†Ô∏è  Psic√≥logo no encontrado (esperado con ID de prueba)');
      } else {
        console.log(`   ‚ùå Error inesperado: ${error.response?.data?.message || error.message}`);
      }
    }

    // Test 3: Verificar que "crear-paciente" NO se interpreta como ID
    console.log('\n3Ô∏è‚É£ Probando GET /api/v1/psicologos/crear-paciente:');
    try {
      const response = await axios.get(`${BASE_URL}/api/v1/psicologos/crear-paciente`, {
        headers: {
          'Authorization': `Bearer ${AUTH_TOKEN}`
        }
      });
      console.log('   ‚ùå PROBLEMA: "crear-paciente" se interpret√≥ como ID');
    } catch (error) {
      if (error.response?.status === 404) {
        console.log('   ‚úÖ CORRECTO: "crear-paciente" no se interpreta como ID (404 Not Found)');
      } else if (error.response?.status === 401) {
        console.log('   ‚ö†Ô∏è  Error de autenticaci√≥n (esperado sin token v√°lido)');
      } else {
        console.log(`   ‚ùå Error inesperado: ${error.response?.data?.message || error.message}`);
      }
    }

    // Test 4: Verificar otras rutas espec√≠ficas
    console.log('\n4Ô∏è‚É£ Probando rutas espec√≠ficas:');
    
    const rutasEspecificas = [
      'disponibilidad/agenda',
      'disponibilidad/psicologo',
      'box-disponible',
      'public'
    ];

    for (const ruta of rutasEspecificas) {
      try {
        const response = await axios.get(`${BASE_URL}/api/v1/psicologos/${ruta}`);
        console.log(`   ‚úÖ GET /api/v1/psicologos/${ruta} funciona`);
      } catch (error) {
        if (error.response?.status === 400) {
          console.log(`   ‚ö†Ô∏è  GET /api/v1/psicologos/${ruta} requiere par√°metros (esperado)`);
        } else {
          console.log(`   ‚ùå Error en ${ruta}: ${error.response?.data?.message || error.message}`);
        }
      }
    }

    console.log('\nüìã Resumen de la prueba:');
    console.log('   - Las rutas espec√≠ficas (como "crear-paciente") deben funcionar correctamente');
    console.log('   - Las rutas con par√°metros din√°micos (:id) deben estar al final');
    console.log('   - No debe haber conflictos entre rutas espec√≠ficas y din√°micas');

  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
  }
}

// Funci√≥n para mostrar el orden correcto de las rutas
function mostrarOrdenRutas() {
  console.log('\nüìö Orden correcto de rutas en NestJS:');
  console.log('   1. Rutas espec√≠ficas (sin par√°metros)');
  console.log('   2. Rutas con par√°metros espec√≠ficos (como "box/:id")');
  console.log('   3. Rutas con par√°metros din√°micos (como ":id") al final');
  console.log('\n   Ejemplo:');
  console.log('   @Post("crear-paciente")     ‚Üê Espec√≠fica, va primero');
  console.log('   @Get("box/:id")            ‚Üê Par√°metro espec√≠fico');
  console.log('   @Get(":id")                ‚Üê Par√°metro din√°mico, va al final');
}

// Ejecutar las pruebas
async function runTests() {
  mostrarOrdenRutas();
  await testRutasPsicologos();
}

runTests();
